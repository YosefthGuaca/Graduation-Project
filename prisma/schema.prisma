// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  hashedPassword String
  type           AdminType @default(Reader)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  username        String
  hashedPassword  String
  type            UserType       @default(General)
  PremiumStart    DateTime?
  PremiumEnd      DateTime?
  provider        String?
  providerId      String?
  providerData    Json?
  profileFilename String?        @unique
  profilePath     String?
  profileMimetype String?
  profileSize     Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  websites        Website[]
  assets          Asset[]
  CustomDomain    CustomDomain[]
}

model UserLoginLog {
  id        Int      @id @default(autoincrement())
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
}

model Asset {
  id        Int      @id @default(autoincrement())
  filename  String   @unique
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Website {
  id                Int            @id @default(autoincrement())
  title             String
  slug              String         @unique
  faviconFilename   String?        @unique
  faviconPath       String?
  faviconMimetype   String?
  faviconSize       Int?
  googleAnalyticsId String?
  metaDescription   String?
  ogTitle           String?
  ogDescription     String?
  ogImageFilename   String?
  ogImagePath       String?
  ogImageMimetype   String?
  ogImageSize       Int?
  password          String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id])
  userId            Int
  versions          Version[]
  CustomDomain      CustomDomain[]
}

model Version {
  id        Int           @id @default(autoincrement())
  pages     Page[]
  status    VersionStatus @default(Draft)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Website   Website       @relation(fields: [websiteId], references: [id])
  websiteId Int
}

model Page {
  id        Int      @id @default(autoincrement())
  slug      String
  content   Json?
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Version  @relation(fields: [versionId], references: [id])
  versionId Int

  @@unique([slug, versionId])
}

model Template {
  id        Int      @id @default(autoincrement())
  name      String
  path      String
  order     Int      @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomDomain {
  id          Int       @id @default(autoincrement())
  domain      String    @unique
  requestedAt DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  website     Website   @relation(fields: [websiteId], references: [id])
  websiteId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum AdminType {
  Super
  Editor
  Reader
}

enum UserType {
  Admin
  General
}

enum VersionStatus {
  Draft
  Published
  Archived
}
